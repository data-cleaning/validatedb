% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/confront.R
\name{confront.tbl_sql}
\alias{confront.tbl_sql}
\title{Confront \code{tbl_sql} with \code{validator} rules.}
\usage{
confront.tbl_sql(tbl, x, ref, key = NULL, sparse = FALSE, compute = FALSE, ...)
}
\arguments{
\item{tbl}{tbl_sql object, table in a database, retrieved with \code{\link[dplyr:tbl]{dplyr::tbl()}}}

\item{x}{\code{\link[validate:validator]{validate::validator()}} object with validation rules.}

\item{ref}{reference object (not working)}

\item{key}{\code{character} with key column name.}

\item{sparse}{\code{logical} should only fails be stored in the db?}

\item{compute}{\code{logical} if \code{TRUE} the check stores a temporary table in the database.}

\item{...}{passed through to \code{\link[=compute]{compute()}}, if \code{compute} is \code{TRUE}}
}
\description{
Confront \code{tbl_sql} objects with \code{validator} rules. This function makes it
possible to execute \code{validator()} rules on database tables.
}
\examples{
# create a table in a database
income <- data.frame(id = 1:2, age=c(12,35), salary = c(1000,NA))
con <- dbplyr::src_memdb()
tbl_income <- dplyr::copy_to(con, income, overwrite=TRUE)
print(tbl_income)

# Let's define a rule set and confront the table with it:
rules <- validator( is_adult   = age >= 18
                  , has_income = salary > 0
                  )

# and confront!
cf <- confront(tbl_income, rules)
print(cf)

# Values (i.e. validations on the table) can be retrieved like in `validate` 
# with`type="list"`
values(cf, type = "list")

# But often this seems more handy:
values(cf, type = "tbl")

# We can see the sql code by using `show_query`:
show_query(cf)

# identical
show_query(values(cf, type = "tbl"))

cf <- confront(tbl_income, rules, sparse=TRUE)
values(cf, type="tbl")
}
\seealso{
Other confront: 
\code{\link{confront_tbl_sparse}()},
\code{\link{tbl_validation-class}},
\code{\link{values,tbl_validation-method}}
}
\concept{confront}
