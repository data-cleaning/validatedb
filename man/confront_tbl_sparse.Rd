% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/confront_tbl_sparse.R
\name{confront_tbl_sparse}
\alias{confront_tbl_sparse}
\title{Create a sparse confrontation query}
\usage{
confront_tbl_sparse(
  tbl,
  x,
  key = NULL,
  union_all = TRUE,
  ...,
  check_rules = TRUE
)
}
\arguments{
\item{tbl}{tbl_sql object, table in a database, retrieved with \code{\link[dplyr:tbl]{dplyr::tbl()}}}

\item{x}{\code{\link[validate:validator]{validate::validator()}} object with validation rules.}

\item{key}{\code{character} with key column name (not working)}

\item{union_all}{if \code{FALSE} each rule is a separate query.}

\item{...}{passed through to \code{\link[=compute]{compute()}}, if \code{compute} is \code{TRUE}}

\item{check_rules}{if \code{TRUE} it is checked which rules 'work' on the db.}
}
\description{
Create a sparse confrontation query. Only errors and missing are stored.
This can be useful alternative to \code{\link[=confront_tbl]{confront_tbl()}} which stores all results
of a \code{tbl} validation in a table with \code{length(rules)} columns and \code{nrow(tbl)}
rows. Note that the result of this function is a (lazy) query object that
still needs to be executed in the database, e.g. with \code{\link[dplyr:compute]{dplyr::collect()}}, \code{\link[dplyr:compute]{dplyr::collapse()}} or
\code{\link[dplyr:compute]{dplyr::compute()}}.
}
\examples{
# create a table in a database
income <- data.frame(id = 1:2, age=c(12,35), salary = c(1000,NA))
con <- dbplyr::src_memdb()
tbl_income <- dplyr::copy_to(con, income, overwrite=TRUE)
print(tbl_income)

# Let's define a rule set and confront the table with it:
rules <- validator( is_adult   = age >= 18
                  , has_income = salary > 0
                  )

# and confront!
cf <- confront(tbl_income, rules)
print(cf)

# Values (i.e. validations on the table) can be retrieved like in `validate` 
# with`type="list"`
values(cf, type = "list")

# But often this seems more handy:
values(cf, type = "tbl")

# We can see the sql code by using `show_query`:
show_query(cf)

# identical
show_query(values(cf, type = "tbl"))

cf <- confront(tbl_income, rules, sparse=TRUE)
values(cf, type="tbl")
}
\concept{confront}
