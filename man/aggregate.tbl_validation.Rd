% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/aggregate.R
\name{aggregate.tbl_validation}
\alias{aggregate.tbl_validation}
\title{Aggregate a validation}
\usage{
\method{aggregate}{tbl_validation}(x, by = c("rule", "record", "id"), ...)
}
\arguments{
\item{x}{\code{tbl_validation} object}

\item{by}{either by "rule" or by "record"}

\item{...}{not used}
}
\description{
Create either statistics by rule or record.
}
\details{
The result of a \code{\link[=confront]{confront()}} on a db  \code{tbl} results in a lazy query. That
is it builds a query without executing it. To store the result in the database
use \code{\link[=compute]{compute()}} or \code{\link[=values]{values()}}.
}
\examples{
income <- data.frame(id = 1:2, age=c(12,35), salary = c(1000,NA))
con <- dbplyr::src_memdb()
tbl_income <- dplyr::copy_to(con, income, overwrite=TRUE)
print(tbl_income)

# Let's define a rule set and confront the table with it:
rules <- validator( is_adult   = age >= 18
                    , has_income = salary > 0
)

# and confront!
# in general with a db table it is handy to use a key
cf <- confront(tbl_income, rules, key="id")
aggregate(cf, by = "rule")
aggregate(cf, by = "record")

# to tweak performance of the db query the following options are available
# 1) store validation result in db
cf <- confront(tbl_income, rules, key="id", compute = TRUE)
# or identical
cf <- confront(tbl_income, rules, key="id")
cf <- compute(cf)

# 2) Store the validation sparsely
cf <- confront(tbl_income, rules, key="id", sparse=TRUE )

show_query(compute(cf))
values(cf, type="tbl")
}
