% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/values.R
\name{values,tbl_validation-method}
\alias{values,tbl_validation-method}
\title{Retrieve the result of a validation/confront}
\usage{
\S4method{values}{tbl_validation}(x, simplify = TRUE, type = c("tbl", "list"), ...)
}
\arguments{
\item{x}{object of type \code{tbl_validation}}

\item{simplify}{only use when \code{type} = "list" see \code{validate::values}}

\item{type}{whether to return a list/matrix or to return a query on the database.}

\item{...}{not used}
}
\description{
Retrieve the result of a validation/confront
}
\examples{
# create a table in a database
income <- data.frame(id = letters[1:2], age=c(12,35), salary = c(1000,NA))
con <- dbplyr::src_memdb()
tbl_income <- dplyr::copy_to(con, income, overwrite=TRUE)
print(tbl_income)

# Let's define a rule set and confront the table with it:
rules <- validator( is_adult   = age >= 18
                  , has_income = salary > 0
                  , mean(age,na.rm=TRUE) > 20
                  )

# and confront!
cf <- confront(tbl_income, rules)
print(cf)

# Values (i.e. validations on the table) can be retrieved like in `validate` 
# with`type="list"`
values(cf, type = "list")

# But often this seems more handy:
values(cf, type = "tbl")

# We can see the sql code by using `show_query`:
show_query(cf)

# identical
show_query(values(cf, type = "tbl"))

cf <- confront(tbl_income, rules, key = "id")
print(cf)
values(cf, type="tbl")

# sparse results in db
cf <- confront(tbl_income, rules, sparse=TRUE)
values(cf, type="tbl")
}
\seealso{
Other confront: 
\code{\link{confront.tbl_sql}()},
\code{\link{confront_tbl_sparse}()},
\code{\link{tbl_validation-class}}
}
\concept{confront}
