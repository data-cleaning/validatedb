% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_rules.R
\name{check_rules}
\alias{check_rules}
\title{Check validation rules on the database}
\usage{
check_rules(tbl, x, key = NULL)
}
\arguments{
\item{tbl}{\code{\link[dbplyr:tbl.src_dbi]{dbplyr::tbl_dbi()}} table in a database, retrieved with \code{\link[=tbl]{tbl()}}}

\item{x}{\code{\link[validate:validator]{validate::validator()}} object with validation rules.}

\item{key}{\code{character} with key column name, must be specified}
}
\value{
\code{data.frame} with \code{name}, \code{rule}, \code{working}, \code{sql} for each rule.
}
\description{
Checks whether validation rules are working on the database, and gives
hints on non working rules.
}
\details{
\code{validatedb} translates validation rules using \code{dbplyr} on a database. Every
database engine is different, so it may happen that some validation rules
will not work. This function helps in finding out why rules are not working.

In some (easy to fix) cases, this may be due to:
\itemize{
\item using variables that are not present in the table
\item using a different value type than the column in the database, e.g.using an integer
value, while the database column is of type "varchar".
\item To debug your rules, a useful thing to do is first to test the rules on a
small sub set of the table
\item e.g.
}\preformatted{tbl |> 
  head() |>          # debugging on db
  as.data.frame() |> # debugging "rules", do they work on a data.frame
  confront(rules, key = "id") |> 
  summary()
}

But it can also be that some R functions are not available on the database,
in which case you have to reformulate the rule.
}
\examples{
person <- dbplyr::memdb_frame(id = letters[1:2], age = c(12, 20))
rules <- validator(age >= 18)

check_rules(person, rules, key = "id")

# use the result of check_rules to find out more on the translation
res <- check_rules(person, rules, key = "id")

print(res[-4])
writeLines(res$sql)
}
